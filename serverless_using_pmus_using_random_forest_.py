# -*- coding: utf-8 -*-
"""Serverless using PMUs_using random forest .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_LmJVQjYtiZHWggqLH0eEDAoMVZ0jHHe
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# load the dataset
df = pd.DataFrame({
    'Function': ['Func 1', 'Func 2', 'Func 3', 'Func 4', 'Func 5'],
    'Invocation #': [100, 200, 150, 120, 180],
    'Memory Used (MB)': [256, 128, 512, 256, 128],
    'Duration (ms)': [250, 150, 300, 200, 175],
    'CPU Utilization (%)': [50, 75, 60, 45, 70],
    'Network Latency (ms)': [5, 8, 10, 7, 9]
})

# split data into X and y
X = df.drop(['Function', 'Duration (ms)'], axis=1)
y = df['Duration (ms)']

# split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# create a random forest regressor object
rf = RandomForestRegressor(n_estimators=100, random_state=42)

# train the model using the training sets
rf.fit(X_train, y_train)

# make predictions using the testing set
y_pred = rf.predict(X_test)

# calculate the mean squared error
mse = mean_squared_error(y_test, y_pred)
print('Mean Squared Error:', mse)

# get feature importances
importances = rf.feature_importances_

# convert the importances into a pandas dataframe
importances_df = pd.DataFrame({'Feature': X.columns, 'Importance': importances})

# sort the dataframe by feature importance
importances_df = importances_df.sort_values('Importance')

# plot the feature importances
plt.barh(importances_df['Feature'], importances_df['Importance'])
plt.title('Feature Importances')
plt.xlabel('Importance')
plt.show()

