# -*- coding: utf-8 -*-
"""Serverless using PMUs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TcGYkIS2OgtGrj2YeOM0Gn6_AF5-D4jV
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error

# Load the dataset
data = pd.DataFrame({
    'Function': [1, 2, 3, 4, 5],
    'Invocation #': [100, 200, 150, 120, 180],
    'Memory Used (MB)': [256, 128, 512, 256, 128],
    'Duration (ms)': [250, 150, 300, 200, 175],
    'CPU Utilization (%)': [50, 75, 60, 45, 70],
    'Network Latency (ms)': [5, 8, 10, 7, 9]
})

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data[['Function', 'Invocation #']], data['Memory Used (MB)'], test_size=0.2)

# Create a decision tree regression model
model = DecisionTreeRegressor()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Compute the mean squared error of the predictions
mse = mean_squared_error(y_test, y_pred)

print(f'Mean Squared Error: {mse:.2f} MB')

import matplotlib.pyplot as plt

# Plot the actual vs. predicted values of Memory Used on the testing data
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Memory Used (MB)')
plt.ylabel('Predicted Memory Used (MB)')
plt.title('Actual vs. Predicted Memory Used')
plt.show()

# Plot the histograms of the output parameters
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10, 8))
plt.subplots_adjust(hspace=0.4)

axes[0, 0].hist(data['Memory Used (MB)'], bins=10)
axes[0, 0].set_xlabel('Memory Used (MB)')
axes[0, 0].set_ylabel('Frequency')
axes[0, 0].set_title('Distribution of Memory Used')

axes[0, 1].hist(data['Duration (ms)'], bins=10)
axes[0, 1].set_xlabel('Duration (ms)')
axes[0, 1].set_ylabel('Frequency')
axes[0, 1].set_title('Distribution of Duration')

axes[1, 0].hist(data['CPU Utilization (%)'], bins=10)
axes[1, 0].set_xlabel('CPU Utilization (%)')
axes[1, 0].set_ylabel('Frequency')
axes[1, 0].set_title('Distribution of CPU Utilization')

axes[1, 1].hist(data['Network Latency (ms)'], bins=10)
axes[1, 1].set_xlabel('Network Latency (ms)')
axes[1, 1].set_ylabel('Frequency')
axes[1, 1].set_title('Distribution of Network Latency')

plt.show()