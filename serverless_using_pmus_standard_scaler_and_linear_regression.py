# -*- coding: utf-8 -*-
"""Serverless using PMUs_Standard Scaler and Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/152hF7uggxktUMWvRijJWW2oo59ltkkp8
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load the dataset into a pandas DataFrame
data = pd.DataFrame({
    'Function': ['Func 1', 'Func 2', 'Func 3', 'Func 4', 'Func 5'],
    'Invocation': [100, 200, 150, 120, 180],
    'Memory Used (MB)': [256, 128, 512, 256, 128],
    'Duration (ms)': [250, 150, 300, 200, 175],
    'CPU Utilization (%)': [50, 75, 60, 45, 70],
    'Network Latency (ms)': [5, 8, 10, 7, 9]
})

# Separate the input features and output variable
X = data.iloc[:, 2:].values
y = data.iloc[:, 1].values

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

# Scale the input features
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.linear_model import LinearRegression

# Train the multiple linear regression model
regressor = LinearRegression()
regressor.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error, r2_score

# Make predictions on the testing set
y_pred = regressor.predict(X_test)

# Evaluate the model performance using various metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print('Mean Squared Error:', mse)
print('Root Mean Squared Error:', rmse)
print('R-squared:', r2)

# Print the coefficient table
coeff_df = pd.DataFrame(regressor.coef_, columns=['Coefficient'])
coeff_df.index = ['Memory Used (MB)', 'Duration (ms)', 'CPU Utilization (%)', 'Network Latency (ms)']
print(coeff_df)

import matplotlib.pyplot as plt

# Create a scatter plot
plt.scatter(X_test[:, 0], y_test, color='red', label='Actual')
plt.scatter(X_test[:, 0], y_pred, color='blue', label='Predicted')
plt.xlabel('Memory Used (MB)')
plt.ylabel('Function Invocation')
plt.legend()
plt.show()

# Create a residual plot
plt.scatter(y_pred, y_test - y_pred)
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.show()

import matplotlib.pyplot as plt

# Define the coefficients and their labels
coefficients = [-40.893, 0.082, -0.361, 10.619]
labels = ['Memory Used', 'Duration', 'CPU Utilization', 'Network Latency']

# Create a bar plot of the coefficients
fig, ax = plt.subplots()
ax.bar(labels, coefficients)

# Add labels and title
ax.set_xlabel('Input Feature')
ax.set_ylabel('Coefficient')
ax.set_title('Model Coefficients')

# Show the plot
plt.show()